version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy_environment:
    description: Destroy stacks given a workflow ID
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy infrastructure
          when: on_fail
          command: |
            echo udacity-capstone-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name udacity-capstone-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build-app:
    docker:
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: setup and install dependencies
          command: |
            # using python virtual environment
            python3 -m venv venv
            . venv/bin/activate
            
            # Install hadolint and change the mode
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint
            
            # install dependencies
            pip install --upgrade pip && pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint Dockerfile
            # This should be run from inside a virtualenv
            pylint --disable=R,C,W1203,W1202,E0611,W1309 app.py 

  build-docker:
    docker:
      - image: cimg/base:2022.06
        auth:
          username: fikrihelmi17
          password: 17wordpressGO
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Docker Build
          command: |
            docker build -t fikrihelmi17/udacity-capstone .
            docker login -u fikrihelmi17 -p 17wordpressGO
            docker push fikrihelmi17/udacity-capstone

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Tar and Gzip
          command: |
            yum -y install tar gzip npm
      - run:
          name: Deploy the Kubernetes Cluster
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/eks.yaml \
              --stack-name "udacity-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity-capstone \
              --capabilities CAPABILITY_IAM \
              --no-fail-on-empty-changeset
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
  
  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Tar and Gzip
          command: |
            yum -y install tar gzip npm
      - run:
          name: install kubectl
          command: |
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.23.7/2022-06-29/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version
      - run:
          name: Access the Kubernetes cluster
          command: |
            aws eks update-kubeconfig --name udacity-capstone
            kubectl get nodes

workflows:
  default:
    jobs:
      - build-app
      - build-docker:
          requires: [build-app]
      - deploy-infrastructure:
          requires: [build-docker]